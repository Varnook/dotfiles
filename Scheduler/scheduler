#!/bin/python

import sys
import ast
import curses as c
from pathlib import Path
from datetime import date, timedelta

ROUTINE_FILE  = str(Path.home()) + "/.scheduler/routine"
CALENDAR_FILE = str(Path.home()) + "/.scheduler/calendar"
HOURS_LENGTH = 4
MAIN_WINDOW_ROW_SECTIONS = 6
WEEK_WINDOW_HEIGHT = 5
WEEK_WINDOW_WIDTH = 3 * 7 + 1

def initMainWindow():
    stdscr = c.initscr()
    stdscr.keypad(True)
    c.noecho()
    c.cbreak()
    c.curs_set(0)
    return stdscr

def setupDayWindow(rowPos, colPos, tasks):
    longestString = max(map(len, [val for val in tasks.values()]))
    winWidth  = HOURS_LENGTH + 2 + longestString 
    # Counts the amount of hours in the table
    winHeight = sum(map(lambda t: t[1] - t[0] + 1, [k for k in tasks.keys()])) + 1 # 1: Day row
    return c.newwin(winHeight, winWidth, rowPos, colPos)

def setupWeekWindow(rowPos, colPos):
    # 4 characters day row, separator row, appointment row, week movement arrows row
    # 3 characters 7 days of the week, remaining week movement arrow
    return c.newwin(WEEK_WINDOW_HEIGHT, WEEK_WINDOW_WIDTH, rowPos, colPos)

def initWindows():
    stdscr = initMainWindow()

    heightMain, widthMain = stdscr.getmaxyx() 

    tasks, today = getDayActivities()
    longestString = max(map(len, [val for val in tasks.values()]))
    dayWinRow = int(heightMain / MAIN_WINDOW_ROW_SECTIONS)
    dayWinCol = int(widthMain / 2) - int((longestString + HOURS_LENGTH) / 2)
    dayWin = setupDayWindow(dayWinRow, dayWinCol, tasks)

    weekRowPos = dayWinRow + dayWin.getmaxyx()[0] + 2
    weekColPos = int(widthMain / 2) - int((WEEK_WINDOW_WIDTH - 2) / 2) # -2 for the arrows
    weekWin = setupWeekWindow(weekRowPos, weekColPos)

    return stdscr, dayWin, weekWin

def startColors():
    c.start_color()
    c.use_default_colors()

    c.init_pair(1, c.COLOR_GREEN, -1)
    c.init_pair(2, c.COLOR_GREEN, c.COLOR_BLACK)
    c.init_pair(3, c.COLOR_WHITE, c.COLOR_BLUE)
    c.init_pair(4, c.COLOR_YELLOW, -1)
    c.init_pair(5, c.COLOR_RED, -1)
    c.init_pair(6, c.COLOR_BLACK, -1)

    return {"GBg"  : c.color_pair(1),
            "GBla" : c.color_pair(2),
            "WBlu" : c.color_pair(3),
            "YBg"  : c.color_pair(4),
            "RBg"  : c.color_pair(5),
            "BlaBg": c.color_pair(6)}


def cleanupAndQuit():
    c.curs_set(1)
    c.nocbreak()
    c.echo()
    c.endwin()
    quit(0)

def processArgs():
    for i in range(len(sys.argv)):
        arg = sys.argv[i]
        if arg == "-r":
            global ROUTINE_FILE 
            ROUTINE_FILE  = sys.argv[i + 1]
        if arg == "-c":
            global CALENDAR_FILE 
            CALENDAR_FILE = sys.argv[i + 1]

def getWeekActivities():
    with open(ROUTINE_FILE, "r") as f:
        return ast.literal_eval(f.read())

def getDayActivities():
    weeklyRoutine = getWeekActivities()
    days = [key for key in weeklyRoutine.keys()]
    today = days[date.today().weekday()]
    return weeklyRoutine[today], today

def getAppointments():
    rawAppointments = {}
    with open(CALENDAR_FILE, "r") as f:
        rawAppointments = ast.literal_eval(f.read())

    year = date.today().timetuple()[0]
    return { (date(year, key[1], key[0]) if len(key) == 2 else date(key[2], key[1], key[0])): val for key, val in rawAppointments.items() }

def filterFarAppointments(appointments, weekRange):
    return { key: val for key, val in appointments.items() if 0 <= (key - date.today()).days <= weekRange * 7 }

def writeDayActivities(dayWin, tasks, today, colPairs):
    dayWin.clear()
    writingPos = 1

    height, width = dayWin.getmaxyx()
    dayWin.addstr(0, int(width / 2) - int(len(today) / 2), today, colPairs["YBg"] | c.A_BOLD | c.A_UNDERLINE)
    
    for hourPair, activity in tasks.items():
        rowSpan = hourPair[1] - hourPair[0] + 1
        hourStart = (" " if hourPair[0] < 10 else "") + str(hourPair[0]) + ":00"

        attrHours = (colPairs["GBg"] if writingPos % 2 else colPairs["GBla"]) | c.A_BOLD
        dayWin.addstr(writingPos, 0, hourStart, attrHours)
        attrAct = (c.A_BOLD if writingPos % 2 else 0)
        dayWin.addstr(writingPos + int(rowSpan / 2), HOURS_LENGTH + 2, activity, attrAct)
        dayWin.vline(writingPos, HOURS_LENGTH + 1, c.ACS_VLINE, rowSpan)

        if rowSpan > 1:
            hourEnd = (" " if hourPair[1] < 10 else "") + str(hourPair[1]) + ":00"
            dayWin.addstr(writingPos + rowSpan - 1, 0, hourEnd, colPairs["GBg"] | c.A_BOLD)
        
        writingPos += rowSpan
    dayWin.refresh()

def shortenDayNames(week, size):
    return [day[:size] for day in week]

def diffFromMonday(day):
    today  = date.today()
    monday = today - timedelta(today.weekday())
    return (day - monday).days

def weekWinLogic(weekParams):
    currentWeek, weekRange = weekParams

    today = date.today().weekday() if currentWeek == 1 else -1

    weekPos = "start" if currentWeek == 1 else "end" if currentWeek == weekRange else "middle"
    
    appointments = filterFarAppointments(getAppointments(), weekRange)
    weekdayAppts = {}
    currentAppts = []
    actNum       = 1
    for dateKey, appointment in appointments.items():
        if (currentWeek - 1) * 7 <= diffFromMonday(dateKey) <= currentWeek * 7:
            weekdayAppts[dateKey.weekday()] = str(actNum)
            currentAppts.append(appointment)
            actNum += 1

    return today, weekPos, weekdayAppts, currentAppts

def writeWeekCalendar(weekWin, logicResult, colPairs):
    today, weekPos, weekdayAppts, unused = logicResult
    dayNames = shortenDayNames(list(getWeekActivities().keys()), 2)
    weekWin.clear()

    weekWin.hline(1, 0, c.ACS_HLINE, 3 * 7 - 1)
    for i in range(0, 3 * 7, 3):
        weekWin.addstr(0, i, dayNames[int(i/3)], colPairs["RBg"] if int(i/3) == today else 0)
        if i < 3 * 6:
            weekWin.vline(0, i + 2, c.ACS_VLINE, 3)
            weekWin.addch(1, i + 2, c.ACS_PLUS)

    # TODO figure out why WEEK_WINDOW_HEIGHT - 1 or weekWin.getmaxyx()[0] - 1 crashes
    weekWin.addch(WEEK_WINDOW_HEIGHT - 2, WEEK_WINDOW_WIDTH - 1, c.ACS_RARROW, c.A_BOLD | (colPairs["BlaBg"] if weekPos == "end" else 0)) 
    weekWin.addch(WEEK_WINDOW_HEIGHT - 2, WEEK_WINDOW_WIDTH - 3, c.ACS_LARROW, c.A_BOLD | (colPairs["BlaBg"] if weekPos == "start" else 0)) 
     
    for dayNum, apptmNum in weekdayAppts.items():
        weekWin.addstr(2, dayNum * 2 + dayNum, "•" + apptmNum)

    weekWin.refresh()

class Input:
    def __init__(self, currentWeek, weekRange):
        self.currentWeek = currentWeek
        self.weekRange = weekRange
        self.actions = { ord('q'): cleanupAndQuit,
                         c.KEY_RIGHT: self._weekInc,
                         c.KEY_LEFT: self._weekDec }

    def _weekInc(self):
        self.currentWeek = self.currentWeek + 1 if self.currentWeek < self.weekRange else self.currentWeek

    def _weekDec(self):
        self.currentWeek = self.currentWeek - 1 if self.currentWeek > 1 else self.currentWeek

    def execute(self, ch):
        if ch in self.actions.keys():
            self.actions[ch]()

    def getWeekInfo(self):
        return (self.currentWeek, self.weekRange)

def main(): 
    processArgs()
    stdscr, dayWin, weekWin = initWindows()
    colPairs = startColors()
    inout = Input(1, 3)

    weekStart, unused = weekWin.getbegyx()
    weekHeight, unused = weekWin.getmaxyx()
    apptmsHeight = weekStart + weekHeight

    while True:
        weekLogicResult = weekWinLogic(inout.getWeekInfo())
        apptms = weekLogicResult[3]
        stdscr.clear()
        for i in range(len(apptms)):
            stdscr.addstr(apptmsHeight + i + 1, 0, "•" + str(i + 1) + ": " + apptms[i])
        stdscr.refresh()
        
        tasks, today = getDayActivities()
        writeDayActivities(dayWin, tasks, today, colPairs)

        writeWeekCalendar(weekWin, weekLogicResult, colPairs)

        inout.execute(stdscr.getch())

if __name__ == "__main__":
    main()
